{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"1. Theoretical Foundation Governing Equations The motion of a projectile under gravity (without air resistance) is governed by Newton\u2019s Second Law: \\[ \\frac{d^2 x}{dt^2} = 0, \\quad \\frac{d^2 y}{dt^2} = -g \\] Solving these, we get the velocity components: \\[ v_x = v_0 \\cos\\theta, \\quad v_y = v_0 \\sin\\theta - gt \\] And the position equations: \\[ x = v_0 \\cos\\theta \\cdot t, \\quad y = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] where: - \\( v_0 \\) is the initial velocity, - \\( \\theta \\) is the launch angle, - \\( g \\) is the gravitational acceleration. Finding the Range The range \\( R \\) is found by solving for \\( x \\) when \\( y = 0 \\) (projectile returns to ground): \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] Substituting into the equation for \\( x \\) : \\[ R = v_0 \\cos\\theta \\times \\frac{2 v_0 \\sin\\theta}{g} \\] Using the trigonometric identity \\( 2 \\sin\\theta \\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\] This shows the range depends on \\( \\sin 2\\theta \\) , with a maximum at \\( \\theta = 45^\\circ \\) . 2. Analysis of the Range The range is symmetric about \\( \\theta = 45^\\circ \\) , meaning complementary angles (e.g., \\( 30^\\circ \\) and \\( 60^\\circ \\) ) result in the same range. Increasing \\( v_0 \\) increases \\( R \\) quadratically. Increasing \\( g \\) (e.g., on different planets) decreases the range. 3. Practical Applications Sports: Optimizing shot put, long jump, or soccer kicks. Military: Artillery calculations. Space Science: Designing launch angles for rockets. Adding complexities like air resistance leads to asymmetric trajectories and reduced range. 4. Implementation in Python A simple simulation can use NumPy and Matplotlib to visualize the range: import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s^2) angles = np.linspace(0, 90, 500) # Angles in degrees # Calculate range ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g # Handle edge case where angle is 90 degrees ranges[np.isclose(angles, 90)] = 0 # Set range to 0 for 90 degrees # Plot plt.figure(figsize=(8, 6)) plt.plot(angles, ranges) plt.title(\"Range vs Angle of Projection\") plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid() # Save the plot as an image plt.savefig(\"range_vs_angle.png\", dpi=300) # Save as PNG with high resolution plt.show() Graphical Representation Below is the graph showing the relationship between the range and the angle of projection:","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"The motion of a projectile under gravity (without air resistance) is governed by Newton\u2019s Second Law: \\[ \\frac{d^2 x}{dt^2} = 0, \\quad \\frac{d^2 y}{dt^2} = -g \\] Solving these, we get the velocity components: \\[ v_x = v_0 \\cos\\theta, \\quad v_y = v_0 \\sin\\theta - gt \\] And the position equations: \\[ x = v_0 \\cos\\theta \\cdot t, \\quad y = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] where: - \\( v_0 \\) is the initial velocity, - \\( \\theta \\) is the launch angle, - \\( g \\) is the gravitational acceleration.","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#finding-the-range","text":"The range \\( R \\) is found by solving for \\( x \\) when \\( y = 0 \\) (projectile returns to ground): \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] Substituting into the equation for \\( x \\) : \\[ R = v_0 \\cos\\theta \\times \\frac{2 v_0 \\sin\\theta}{g} \\] Using the trigonometric identity \\( 2 \\sin\\theta \\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\] This shows the range depends on \\( \\sin 2\\theta \\) , with a maximum at \\( \\theta = 45^\\circ \\) .","title":"Finding the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range is symmetric about \\( \\theta = 45^\\circ \\) , meaning complementary angles (e.g., \\( 30^\\circ \\) and \\( 60^\\circ \\) ) result in the same range. Increasing \\( v_0 \\) increases \\( R \\) quadratically. Increasing \\( g \\) (e.g., on different planets) decreases the range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Optimizing shot put, long jump, or soccer kicks. Military: Artillery calculations. Space Science: Designing launch angles for rockets. Adding complexities like air resistance leads to asymmetric trajectories and reduced range.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-in-python","text":"A simple simulation can use NumPy and Matplotlib to visualize the range: import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s^2) angles = np.linspace(0, 90, 500) # Angles in degrees # Calculate range ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g # Handle edge case where angle is 90 degrees ranges[np.isclose(angles, 90)] = 0 # Set range to 0 for 90 degrees # Plot plt.figure(figsize=(8, 6)) plt.plot(angles, ranges) plt.title(\"Range vs Angle of Projection\") plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid() # Save the plot as an image plt.savefig(\"range_vs_angle.png\", dpi=300) # Save as PNG with high resolution plt.show()","title":"4. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-representation","text":"Below is the graph showing the relationship between the range and the angle of projection:","title":"Graphical Representation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfaf Motivation The forced damped pendulum is a captivating example of nonlinear dynamics, where damping, restoring forces, and periodic driving interact to create complex behaviors\u2014from periodic motion to chaos. It models real-world systems like mechanical oscillators, climate cycles, and electric circuits. \ud83e\udde0 Theoretical Foundation Governing Equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] \\( \\theta(t) \\) : angular displacement \\( b \\) : damping coefficient \\( A \\) : amplitude of driving force \\( \\omega_d \\) : driving frequency \\( g \\) : acceleration due to gravity \\( L \\) : length of pendulum Small-Angle Approximation: For small \\( \\theta \\) , \\( \\sin(\\theta) \\approx \\theta \\) . The equation becomes: \\[ \\theta'' + b \\theta' + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\] This describes a driven damped harmonic oscillator with resonance near: \\[ \\omega_d \\approx \\sqrt{\\frac{g}{L}} \\] \ud83d\udd2c Analysis of Dynamics By varying parameters, we explore the system\u2019s rich behavior: Damping \\(b\\) : controls energy loss rate Amplitude \\(A\\) : influences transition to chaos Frequency \\( \\omega_d \\) : resonance & quasi-periodicity \ud83e\uddea Python Simulation Code ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Physical parameters g = 9.81 L = 1.0 Differential equation def pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t)] return dydt Solver def solve_pendulum(b, A, omega_d, y0, t_span=(0, 100), points=10000): t_eval = np.linspace(*t_span, points) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, method='RK45', args=(b, A, omega_d)) return sol Plot functions def plot_time_series(sol): plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title('Angle vs Time') plt.xlabel('Time [s]') plt.ylabel('Angle [rad]') plt.grid(True) plt.show() def plot_phase_portrait(sol): plt.figure(figsize=(6, 6)) plt.plot(sol.y[0], sol.y[1], lw=0.5) plt.title('Phase Portrait') plt.xlabel('Angle [rad]') plt.ylabel('Angular Velocity [rad/s]') plt.grid(True) plt.show() def plot_poincare_section(sol, omega_d): T_drive = 2 * np.pi / omega_d sample_times = np.arange(0, sol.t[-1], T_drive) sampled_indices = np.searchsorted(sol.t, sample_times) sampled_theta = sol.y[0][sampled_indices % len(sol.y[0])] sampled_omega = sol.y[1][sampled_indices % len(sol.y[1])] plt.figure(figsize=(6, 6)) plt.plot(sampled_theta, sampled_omega, 'o', markersize=2) plt.title('Poincare Section') plt.xlabel('Angle [rad]') plt.ylabel('Angular Velocity [rad/s]') plt.grid(True) plt.show() def plot_bifurcation(y0, b, omega_d, A_range, sample_point=-100): theta_vals = [] A_vals = [] for A in A_range: sol = solve_pendulum(b, A, omega_d, y0) T_drive = 2 * np.pi / omega_d sample_times = np.arange(0, sol.t[-1], T_drive) sampled_indices = np.searchsorted(sol.t, sample_times) sampled_theta = sol.y[0][sampled_indices[sample_point:]] theta_vals.extend(sampled_theta) A_vals.extend([A] * len(sampled_theta)) plt.figure(figsize=(10, 6)) plt.plot(A_vals, theta_vals, 'k.', markersize=0.5) plt.title('Bifurcation Diagram') plt.xlabel('Driving Amplitude A') plt.ylabel('Angle [rad]') plt.grid(True) plt.show() Run example b = 0.5 A = 1.2 omega_d = 2.0 y0 = [0.1, 0.0] sol = solve_pendulum(b, A, omega_d, y0) plot_time_series(sol) plot_phase_portrait(sol) plot_poincare_section(sol, omega_d) Bifurcation diagram A_values = np.linspace(0.5, 1.5, 500) plot_bifurcation(y0, b, omega_d, A_values)","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating example of nonlinear dynamics, where damping, restoring forces, and periodic driving interact to create complex behaviors\u2014from periodic motion to chaos. It models real-world systems like mechanical oscillators, climate cycles, and electric circuits.","title":"\ud83c\udfaf Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"","title":"\ud83e\udde0 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"\\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] \\( \\theta(t) \\) : angular displacement \\( b \\) : damping coefficient \\( A \\) : amplitude of driving force \\( \\omega_d \\) : driving frequency \\( g \\) : acceleration due to gravity \\( L \\) : length of pendulum","title":"Governing Equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\( \\theta \\) , \\( \\sin(\\theta) \\approx \\theta \\) . The equation becomes: \\[ \\theta'' + b \\theta' + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\] This describes a driven damped harmonic oscillator with resonance near: \\[ \\omega_d \\approx \\sqrt{\\frac{g}{L}} \\]","title":"Small-Angle Approximation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"By varying parameters, we explore the system\u2019s rich behavior: Damping \\(b\\) : controls energy loss rate Amplitude \\(A\\) : influences transition to chaos Frequency \\( \\omega_d \\) : resonance & quasi-periodicity","title":"\ud83d\udd2c Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation-code","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"\ud83e\uddea Python Simulation Code"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#physical-parameters","text":"g = 9.81 L = 1.0","title":"Physical parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"def pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t)] return dydt","title":"Differential equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solver","text":"def solve_pendulum(b, A, omega_d, y0, t_span=(0, 100), points=10000): t_eval = np.linspace(*t_span, points) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, method='RK45', args=(b, A, omega_d)) return sol","title":"Solver"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plot-functions","text":"def plot_time_series(sol): plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title('Angle vs Time') plt.xlabel('Time [s]') plt.ylabel('Angle [rad]') plt.grid(True) plt.show() def plot_phase_portrait(sol): plt.figure(figsize=(6, 6)) plt.plot(sol.y[0], sol.y[1], lw=0.5) plt.title('Phase Portrait') plt.xlabel('Angle [rad]') plt.ylabel('Angular Velocity [rad/s]') plt.grid(True) plt.show() def plot_poincare_section(sol, omega_d): T_drive = 2 * np.pi / omega_d sample_times = np.arange(0, sol.t[-1], T_drive) sampled_indices = np.searchsorted(sol.t, sample_times) sampled_theta = sol.y[0][sampled_indices % len(sol.y[0])] sampled_omega = sol.y[1][sampled_indices % len(sol.y[1])] plt.figure(figsize=(6, 6)) plt.plot(sampled_theta, sampled_omega, 'o', markersize=2) plt.title('Poincare Section') plt.xlabel('Angle [rad]') plt.ylabel('Angular Velocity [rad/s]') plt.grid(True) plt.show() def plot_bifurcation(y0, b, omega_d, A_range, sample_point=-100): theta_vals = [] A_vals = [] for A in A_range: sol = solve_pendulum(b, A, omega_d, y0) T_drive = 2 * np.pi / omega_d sample_times = np.arange(0, sol.t[-1], T_drive) sampled_indices = np.searchsorted(sol.t, sample_times) sampled_theta = sol.y[0][sampled_indices[sample_point:]] theta_vals.extend(sampled_theta) A_vals.extend([A] * len(sampled_theta)) plt.figure(figsize=(10, 6)) plt.plot(A_vals, theta_vals, 'k.', markersize=0.5) plt.title('Bifurcation Diagram') plt.xlabel('Driving Amplitude A') plt.ylabel('Angle [rad]') plt.grid(True) plt.show()","title":"Plot functions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#run-example","text":"b = 0.5 A = 1.2 omega_d = 2.0 y0 = [0.1, 0.0] sol = solve_pendulum(b, A, omega_d, y0) plot_time_series(sol) plot_phase_portrait(sol) plot_poincare_section(sol, omega_d)","title":"Run example"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#bifurcation-diagram","text":"A_values = np.linspace(0.5, 1.5, 500) plot_bifurcation(y0, b, omega_d, A_values)","title":"Bifurcation diagram"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}